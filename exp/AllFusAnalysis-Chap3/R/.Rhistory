# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Fo_shared <- heatmap_Fo_only %>%
select_if(colSums(heatmap_Fo_only) >= nrow(heatmap_Fo_only))
# count the number of columns
ncol(heatmap_Fo_shared)
# ---- summarise the distribution of candidate effector clusters in cubense ---- #
# subset only the Foc rows
heatmap_Foc_only <- subset(CEC_binary_df, grepl("^Fo._fsp._cubense", rownames(CEC_binary_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foc_shared <- heatmap_Foc_only %>%
select_if(colSums(heatmap_Foc_only) >= nrow(heatmap_Foc_only))
# count the number of columns
ncol(heatmap_Foc_shared)
# ---- summarise the distribution of candidate effector clusters in lactucae ---- #
# subset only the Fola rows
heatmap_Fola_only <- subset(CEC_binary_df, grepl("^Fo._fsp._lactucae", rownames(CEC_binary_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Fola_shared <- heatmap_Fola_only %>%
select_if(colSums(heatmap_Fola_only) >= nrow(heatmap_Fola_only))
# count the number of columns
ncol(heatmap_Fola_shared)
# ---- summarise the distribution of candidate effector clusters in apii ---- #
# subset only the Foa rows
heatmap_Foa_only <- subset(CEC_binary_df, grepl("^Fo._fsp._apii", rownames(CEC_binary_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foa_shared <- heatmap_Foa_only %>%
select_if(colSums(heatmap_Foa_only) >= nrow(heatmap_Foa_only))
# count the number of columns
ncol(heatmap_Foa_shared)
# ---- summarise the distribution of candidate effector clusters in apii R3 and R4 (not R2)---- #
# subset only the Foa rows
heatmap_Foa_r3r4_only <- subset(CEC_binary_df, grepl("^Fo._fsp._apii_274.AC|^Fo._fsp._apii_AJ498|^Fo._fsp._apii_NRRL38295", rownames(CEC_binary_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foa_r3r4_only_shared <- heatmap_Foa_r3r4_only %>%
select_if(colSums(heatmap_Foa_r3r4_only) >= nrow(heatmap_Foa_r3r4_only))
# count the number of columns
ncol(heatmap_Foa_r3r4_only_shared)
# -- identify which CECs are unique
# first drop all the columns where all values == 0 in the Foa race 3/race4 specific matrix
heatmap_Foa_r3r4_only_drop_0 <- heatmap_Foa_r3r4_only[, colSums(heatmap_Foa_r3r4_only != 0) > 0]
#next use set diff to identify the different columns
not_shared_cols <- setdiff(names(heatmap_Foa_r3r4_only_drop_0), names(heatmap_Foa_r3r4_only_shared))
# ---- summarise the distribution of candidate effector clusters in coriandrii ---- #
# subset only the Foci rows
heatmap_Foci_only <- subset(CEC_binary_df, grepl("^Fo._fsp._coriandrii", rownames(CEC_binary_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foci_shared <- heatmap_Foci_only %>%
select_if(colSums(heatmap_Foci_only) >= nrow(heatmap_Foci_only))
# count the number of columns
ncol(heatmap_Foci_shared)
# ---- summarise the distribution of candidate effector clusters in apii and coridanrii (as they share some hosts) ---- #
# subset only the Foa and Foci rows
heatmap_Foa_c_only <- subset(CEC_binary_df, grepl("^Fo._fsp._apii|^Fo._fsp._coriandrii", rownames(CEC_binary_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foa_c_shared <- heatmap_Foa_c_only %>%
select_if(colSums(heatmap_Foa_c_only) >= nrow(heatmap_Foa_c_only))
# count the number of columns
ncol(heatmap_Foa_c_shared)
# ---- Foa monophyletic group CEC counts ---- #
# subset only the Foa rows
heatmap_Foa_r3r4_andcorr_only <- subset(CEC_binary_df, grepl("^Fo._fsp._apii_274.AC|^Fo._fsp._apii_AJ498|^Fo._fsp._apii_NRRL38295|Fo._fsp._coriandrii_3-2", rownames(CEC_binary_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foa_r3r4_andcorr_only_shared <- heatmap_Foa_r3r4_andcorr_only %>%
select_if(colSums(heatmap_Foa_r3r4_andcorr_only) >= nrow(heatmap_Foa_r3r4_andcorr_only))
# count the number of columns
ncol(heatmap_Foa_r3r4_andcorr_only_shared)
# -- identify which CECs are unique
# first drop all the columns where all values == 0 in the Foa race 3/race4 specific matrix
heatmap_Foa_r3r4_andcorr_only_drop_0 <- heatmap_Foa_r3r4_andcorr_only[, colSums(heatmap_Foa_r3r4_andcorr_only != 0) > 0]
#next use set diff to identify the different columns
not_shared_cols <- setdiff(names(heatmap_Foa_r3r4_andcorr_only_drop_0), names(heatmap_Foa_r3r4_andcorr_only_shared))
# ---- Foa monophyletic group CEC counts ---- #
# subset only the Foa rows
heatmap_Foa_r2_and_corr_only <- subset(CEC_binary_df, grepl("^Fo._fsp._apii_207.A|^Fo._fsp._apii_AJ720|Fo._fsp._coriandrii_AJ615", rownames(CEC_binary_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foa_r2_and_corr_only_shared <- heatmap_Foa_r2_and_corr_only %>%
select_if(colSums(heatmap_Foa_r2_and_corr_only) >= nrow(heatmap_Foa_r2_and_corr_only))
# count the number of columns
ncol(heatmap_Foa_r2_and_corr_only_shared)
# -- identify which CECs are unique
# first drop all the columns where all values == 0 in the Foa race 3/race4 specific matrix
heatmap_Foa_r2_and_corr_only_drop_0 <- heatmap_Foa_r2_and_corr_only[, colSums(heatmap_Foa_r2_and_corr_only != 0) > 0]
#next use set diff to identify the different columns
not_shared_cols <- setdiff(names(heatmap_Foa_r2_and_corr_only_drop_0), names(heatmap_Foa_r2_and_corr_only_shared))
# ---- summarise the distribution of candidate effector clusters in F. sacchari and SY-2) ---- #
# subset only the Foa and Foci rows
heatmap_Fs_only <- subset(CEC_binary_df, grepl("^F._sacchari_|^F._TNAU", rownames(CEC_binary_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Fs_shared <- heatmap_Fs_only %>%
select_if(colSums(heatmap_Fs_only) >= nrow(heatmap_Fs_only))
# count the number of columns
ncol(heatmap_Fs_shared)
# ---- summarise the distribution of candidate effector clusters in F. sacchari and SY-2) ---- #
# subset only the Foa and Foci rows
heatmap_banana_only <- subset(CEC_binary_df, grepl("^Fo._fsp._cubense|^F._sacchari_|^F._TNAU", rownames(CEC_binary_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_banana_shared <- heatmap_banana_only %>%
select_if(colSums(heatmap_banana_only) >= nrow(heatmap_banana_only))
# count the number of columns
ncol(heatmap_banana_shared)
# ---- subset the fsp of interest ---- #
# cubense
foc_CEC_stats_sum <- Foc_CEC_medtadata %>%
group_by(race) %>%
summarize(count = n_distinct(isolate_code),
mean_CEC = mean(no._CECs),
min_CEC = min(no._CECs),
max_CEC = max(no._CECs))
# lactucae
fola_CEC_stats_sum <- Fola_CEC_medtadata %>%
group_by(race) %>%
summarize(count = n_distinct(isolate_code),
mean_CEC = mean(no._CECs),
min_CEC = min(no._CECs),
max_CEC= max(no._CECs))
# apii
foa_CEC_stats_sum <- Foa_CEC_medtadata  %>%
group_by(race) %>%
summarize(count = n_distinct(isolate_code),
mean_CEC = mean(no._CECs),
min_CEC = min(no._CECs),
max_CEC = max(no._CECs))
# print it nicely
knitr::kable(foc_CEC_stats_sum)
knitr::kable(fola_CEC_stats_sum)
knitr::kable(foa_CEC_stats_sum)
# ---- subset foc metadata ---- #
#identify all rows in the metadata which do not contain cubense
foc_set_df <- subset(metadata, !grepl("Fo._fsp._cubense|F._sacchari|SY-2|Fo47", label))
#subset just tip labels
foc_set <- data.frame("label" = foc_set_df[,c("label")])
# convert it to a list
foc_set_2 <- paste(foc_set$label, sep = ",")
# subset race data
foc_set_df_race <- data.frame("race" = metadata[,c("race")] )
rownames(foc_set_df_race) <- metadata$label
# ---- subset foc heatmap data ---- #
# reduce the white space in the heatmap but filtering columns where there is no data for foc
# first we extract only the foc rows using the same approach as for the metadata, but instead we perform on the binary matrix
foc_heat_df <- subset(binary_matrix, grepl("Fo._fsp._cubense|F._sacchari|SY-2|Fo47", rownames(binary_matrix)))
# now we need to drop the empty columns
foc_heat_df <- foc_heat_df[, colSums(foc_heat_df != 0) > 0]
node_data <- data.frame(node=c(20, 34), type=c("FOSC", "FSSC"))
# ---- Cluster the heatmap data (again)---- #
# normalisiation is mandatory for clustering, but as my data is binary - i did not normalise.
# Compute hierarchical clustering of columns
foc_heat_df <- cluster_matrix(foc_heat_df, dim = 'col', method ="ward.D2")
# ---- build the basic foc tree ---- #
#dop the non foc tip from the tree
tree_reduced <- drop.tip(tree, foc_set_2)
#build a tree from this data and add in out metadata
foc_tree <- ggtree(tree_reduced, ladderize = T ) %<+% metadata
# ---- build full foc specific tree ---- #
# now make the tree pretty
foc_tree_2 <- foc_tree +
geom_tiplab(aes(label = isolate_code), color = "grey20", offset = 0.0018, linetype = "blank", geom = "text", align = T) +
geom_hilight(node=20, fill="gold") +
geom_hilight(node=34, fill="lightpink") +
geom_tippoint(aes(shape = source), size = 3) +
geom_nodelab(geom='label', aes(label=label, subset= !is.na(as.numeric(label)) & as.numeric(label)> 80), nudge_x = -0.0027) +
geom_rootedge() +
theme(legend.position = "bottom")
# ---- add race data ---- #
#add extra scale so we can plot race with colour
foc_tree_3 <- foc_tree_2 + new_scale_fill()
foc_tree_4 <- gheatmap(foc_tree_3, foc_set_df_race,
offset = 0.015,
width = 0.06,
color = "grey",
colnames = FALSE) +
scale_fill_manual(name = "Race",
values = c("bisque","gold4", "green4"), na.value = "white") +
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 2)))
# ---- add candidate effector clusters ---- #
# add add scale for candidate effector clusters
foc_tree_5 <- foc_tree_4 + new_scale_fill()
# plot the candidate effector clusters
foc_tree_6 <- gheatmap(foc_tree_5, foc_heat_df, offset=0.02, colnames=T, colnames_angle=90, hjust=0.6, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "grey90", high = "black",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
geom_treescale(x=0, y=0.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(foc_tree_6)
foc_tree_4
foc_heat_df
# add add scale for candidate effector clusters
foc_tree_5 <- foc_tree_4 + new_scale_fill()
# plot the candidate effector clusters
foc_tree_6 <- gheatmap(foc_tree_5, foc_heat_df, offset=0.02, colnames=T, colnames_angle=90, hjust=0.6, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "grey90", high = "black",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
geom_treescale(x=0, y=0.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(foc_tree_6)
foc_tree_5
foc_tree_6
# plot the candidate effector clusters
foc_tree_6 <- gheatmap(foc_tree_5, foc_heat_df)
foc_tree_6
# plot the candidate effector clusters
foc_tree_6 <- gheatmap(foc_tree_5, foc_heat_df, offset=0.02, colnames=T, colnames_angle=90, hjust=0.6, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "grey90", high = "black",
breaks = c("Absent","Present"),
na.value = "grey")
foc_tree_6
# plot the candidate effector clusters
foc_tree_6 <- gheatmap(foc_tree_5, foc_heat_df, offset=0.02, colnames=T, colnames_angle=90, hjust=0.6, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)
foc_tree_6
# plot the candidate effector clusters
foc_tree_6 <- gheatmap(foc_tree_5, foc_heat_df, offset=0.02, colnames=T, colnames_angle=90, hjust=0.6, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
geom_treescale(x=0, y=0.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(foc_tree_6)
# plot the candidate effector clusters
foc_tree_6 <- gheatmap(foc_tree_5, foc_heat_df, offset=0.02, colnames=T, colnames_angle=90, hjust=0.6, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin()) +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "grey90", high = "black",
breaks = c("Absent","Present"),
na.value = "grey")+
geom_treescale(x=0, y=0.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(foc_tree_6)
# plot the candidate effector clusters
foc_tree_6 <- gheatmap(foc_tree_5, foc_heat_df, offset=0.02, colnames=T, colnames_angle=90, hjust=0.6, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin()) +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "grey90", high = "black",
breaks = c("0","1"),
na.value = "grey")+
geom_treescale(x=0, y=0.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(foc_tree_6)
# ---- Filter the data ---- #
#prepare data for the upset using in inbuilt complex heatmap function.
m <- make_comb_mat(t(foc_heat_df), mode = "distinct")
# remove all sets with <2 shared CECs
m <- m[comb_size(m) > 0]
# ---- Build the upset plot ---- #
UpSetCECofBanana <- UpSet(m,
lwd = 1,
#comb_order = order(comb_size(m)), # control the order
bg_col = c("pink", "pink" ,"pink", "#FAFAD2", "grey90", "#FAFAD2","#F0E68C","#F0E68C", "#F0E68C","#F0E68C","#F0E68C","#F0E68C","grey90", "grey90", "#FAFAD2","grey90","bisque","grey90"),
top_annotation = upset_top_annotation(m,
annotation_name_rot = 90,
annotation_name_side = "right",
axis_param = list(side = "right"),
add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE)
)
plot(UpSetCECofBanana)
#save it
png(file="UpSetCECofBanana.png", width = 12, height = 8, unit = "in", res = 150)
draw(UpSetCECofBanana)
dev.off()
# ---- Filter the data ---- #
#prepare data for the upset using in inbuilt complex heatmap function.
m <- make_comb_mat(t(foc_heat_df), mode = "distinct")
# remove all sets with <2 shared CECs
m <- m[comb_size(m) > 1]
# ---- Build the upset plot ---- #
UpSetCECofBanana <- UpSet(m,
lwd = 1,
#comb_order = order(comb_size(m)), # control the order
bg_col = c("pink", "pink" ,"pink", "#FAFAD2", "grey90", "#FAFAD2","#F0E68C","#F0E68C", "#F0E68C","#F0E68C","#F0E68C","#F0E68C","grey90", "grey90", "#FAFAD2","grey90","bisque","grey90"),
top_annotation = upset_top_annotation(m,
annotation_name_rot = 90,
annotation_name_side = "right",
axis_param = list(side = "right"),
add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE)
)
plot(UpSetCECofBanana)
#save it
png(file="UpSetCECofBanana.png", width = 12, height = 8, unit = "in", res = 150)
draw(UpSetCECofBanana)
dev.off()
# ---- Filter the data ---- #
#prepare data for the upset using in inbuilt complex heatmap function.
m <- make_comb_mat(t(foc_heat_df), mode = "distinct")
# remove all sets with <2 shared CECs
m <- m[comb_size(m) > 0]
# ---- Build the upset plot ---- #
UpSetCECofBanana <- UpSet(m,
lwd = 1,
#comb_order = order(comb_size(m)), # control the order
bg_col = c("pink", "pink" ,"pink", "#FAFAD2", "grey90", "#FAFAD2","#F0E68C","#F0E68C", "#F0E68C","#F0E68C","#F0E68C","#F0E68C","grey90", "grey90", "#FAFAD2","grey90","bisque","grey90"),
top_annotation = upset_top_annotation(m,
annotation_name_rot = 90,
annotation_name_side = "right",
axis_param = list(side = "right"),
add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE)
)
plot(UpSetCECofBanana)
#save it
png(file="UpSetCECofBanana.png", width = 12, height = 8, unit = "in", res = 150)
draw(UpSetCECofBanana)
dev.off()
# ---- Filter the data ---- #
#prepare data for the upset using in inbuilt complex heatmap function.
m <- make_comb_mat(t(foc_heat_df), mode = "distinct")
# remove all sets with <2 shared CECs
m <- m[comb_size(m) > 0]
# ---- Build the upset plot ---- #
UpSetCECofBanana <- UpSet(m,
lwd = 1,
#comb_order = order(comb_size(m)), # control the order
bg_col = c("pink", "pink" ,"pink", "#FAFAD2", "grey90", "#FAFAD2","#F0E68C","#F0E68C", "#F0E68C","#F0E68C","#F0E68C","#F0E68C","grey90", "grey90", "#FAFAD2","grey90","bisque","grey90"),
top_annotation = upset_top_annotation(m,
annotation_name_rot = 90,
annotation_name_side = "right",
axis_param = list(side = "right"),
add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE)
)
plot(UpSetCECofBanana)
#save it
png(file="UpSetCECofBanana.png", width = 14, height = 8, unit = "in", res = 150)
draw(UpSetCECofBanana)
dev.off()
# ---- Filter the data ---- #
#prepare data for the upset using in inbuilt complex heatmap function.
m <- make_comb_mat(t(foc_heat_df), mode = "distinct")
# remove all sets with <2 shared CECs
m <- m[comb_size(m) > 0]
# ---- Build the upset plot ---- #
UpSetCECofBanana <- UpSet(m,
lwd = 1,
#comb_order = order(comb_size(m)), # control the order
bg_col = c("pink", "pink" ,"pink", "#FAFAD2", "grey90", "#FAFAD2","#F0E68C","#F0E68C", "#F0E68C","#F0E68C","#F0E68C","#F0E68C","grey90", "grey90", "#FAFAD2","grey90","bisque","grey90"),
top_annotation = upset_top_annotation(m,
annotation_name_rot = 90,
annotation_name_side = "right",
axis_param = list(side = "right"),
add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE)
)
plot(UpSetCECofBanana)
#save it
png(file="UpSetCECofBanana.png", width = 10, height = 6, unit = "in", res = 150)
draw(UpSetCECofBanana)
dev.off()
# ---- Filter the data ---- #
#prepare data for the upset using in inbuilt complex heatmap function.
m <- make_comb_mat(t(foa_c_heat_df), mode = "distinct")
# remove all sets with <2 shared CECs
m <- m[comb_size(m) > 0]
# ---- Build the upset plot ---- #
UpSetCECofApii <- UpSet(m,
lwd = 1,
comb_order = order(comb_size(m)), # control the order
bg_col = c("bisque", "#E3F5FF", "#BBC3F5", "#BBC3F5", "grey90","#FFF7B4","#FFF7B4","grey90"),
top_annotation = upset_top_annotation(m,
annotation_name_rot = 90,
annotation_name_side = "right",
axis_param = list(side = "right"),
add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE)
)
plot(UpSetCECofApii)
#save it
png(file="UpSetCECofApii.png", width = 10, height = 6, unit = "in", res = 150)
draw(UpSetCECofApii)
dev.off()
# ---- Filter the data ---- #
#subset only the lactucae data
fola_upset_data <- subset(fola_heat_df, grepl("Fo._fsp._lactucae|Fo._Fo47", row.names(fola_heat_df)))
fola_upset_data <- fola_upset_data[, colSums(fola_upset_data != 0) > 0]
#prepare data for the upset using in inbuilt complex heatmap function.
upset_fola_m <- make_comb_mat(t(fola_upset_data), mode = "distinct")
# remove all sets with <2 shared CECs
upset_fola_m <- upset_fola_m[comb_size(upset_fola_m) > 0]
# ---- Build the upset plot ---- #
UpSetCECofFola <- UpSet(upset_fola_m,
lwd = 1,
comb_order = order(comb_size(upset_fola_m)), # control the order
bg_col = c("bisque", "#A2CD5A80", "#A2CD5A80","#556B2F80","#556B2F80","#A2CD5A80", "#556B2F80"),
top_annotation = upset_top_annotation(upset_fola_m,
annotation_name_rot = 90,
annotation_name_side = "right",
axis_param = list(side = "right"),
add_numbers = TRUE),
right_annotation = upset_right_annotation(upset_fola_m, add_numbers = TRUE)
)
plot(UpSetCECofFola)
#save it
png(file="UpSetCECofFola.png")
draw(UpSetCECofFola)
dev.off()
# ---- Filter the data ---- #
#subset only the lactucae data
fola_upset_data <- subset(fola_heat_df, grepl("Fo._fsp._lactucae|Fo._Fo47", row.names(fola_heat_df)))
fola_upset_data <- fola_upset_data[, colSums(fola_upset_data != 0) > 0]
#prepare data for the upset using in inbuilt complex heatmap function.
upset_fola_m <- make_comb_mat(t(fola_upset_data), mode = "distinct")
# remove all sets with <2 shared CECs
upset_fola_m <- upset_fola_m[comb_size(upset_fola_m) > 0]
# ---- Build the upset plot ---- #
UpSetCECofFola <- UpSet(upset_fola_m,
lwd = 1,
comb_order = order(comb_size(upset_fola_m)), # control the order
bg_col = c("bisque", "#A2CD5A80", "#A2CD5A80","#556B2F80","#556B2F80","#A2CD5A80", "#556B2F80"),
top_annotation = upset_top_annotation(upset_fola_m,
annotation_name_rot = 90,
annotation_name_side = "right",
axis_param = list(side = "right"),
add_numbers = TRUE),
right_annotation = upset_right_annotation(upset_fola_m, add_numbers = TRUE)
)
plot(UpSetCECofFola)
#save it
png(file="UpSetCECofFola.png", width = 10, height = 6, unit = "cm", res = 150)
draw(UpSetCECofFola)
dev.off()
# ---- Filter the data ---- #
#subset only the lactucae data
fola_upset_data <- subset(fola_heat_df, grepl("Fo._fsp._lactucae|Fo._Fo47", row.names(fola_heat_df)))
fola_upset_data <- fola_upset_data[, colSums(fola_upset_data != 0) > 0]
#prepare data for the upset using in inbuilt complex heatmap function.
upset_fola_m <- make_comb_mat(t(fola_upset_data), mode = "distinct")
# remove all sets with <2 shared CECs
upset_fola_m <- upset_fola_m[comb_size(upset_fola_m) > 0]
# ---- Build the upset plot ---- #
UpSetCECofFola <- UpSet(upset_fola_m,
lwd = 1,
comb_order = order(comb_size(upset_fola_m)), # control the order
bg_col = c("bisque", "#A2CD5A80", "#A2CD5A80","#556B2F80","#556B2F80","#A2CD5A80", "#556B2F80"),
top_annotation = upset_top_annotation(upset_fola_m,
annotation_name_rot = 90,
annotation_name_side = "right",
axis_param = list(side = "right"),
add_numbers = TRUE),
right_annotation = upset_right_annotation(upset_fola_m, add_numbers = TRUE)
)
plot(UpSetCECofFola)
#save it
png(file="UpSetCECofFola.png", width = 10, height = 6, unit = "in", res = 150)
draw(UpSetCECofFola)
dev.off()
# ---- load session data --- #
session_data <- sessionInfo()
session_data
citation(ggupset)
citation("ggupset")
