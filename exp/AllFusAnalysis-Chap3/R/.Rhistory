theme(legend.position = "bottom")
#add extra scale so we can plot fsp with colour
p3 <- p2 + new_scale_fill()
# add race data
p4 <- gheatmap(p3, fsp_df,
offset = 0.04,
width = 0.03,
color = "grey20",
colnames = FALSE) +
scale_fill_manual(name = "Fsp",
values = c("blue","purple","goldenrod4","grey90","gold","brown", "lightpink","darkolivegreen3", "grey20", "tomato", "lavender", "tan", "palegreen4", "coral", "yellow"), na.value = "grey") +
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "vertical", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 2)))
# add extra discrete scale
p5 <- p4 + new_scale_fill()
# add effector heatmap
p6 <-gheatmap(p5, heatmap_dat, offset=0.13, colnames=FALSE, legend_title="Presence/\nAbsence", color = "grey",  width = 1.75)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "grey20",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 4)))
plot(p6)
# save the output
ggsave("HeatmapAndPhylo.png", width = 25, height = 15)
# ---- summarise the distribution of candidate effector clusters ---- #
# convert the matrix to a data frame
heatmap_df <- as.data.frame(heatmap_dat)
# count the number of columns to get the total number of CECs
total_CECs <- ncol(heatmap_df)
# total number of candidate effector clusters per assembly (as a dataframe)
cluster_distib <- enframe(colSums(t(heatmap_df[-1])))
#rename the value column
cluster_distib <- rename(cluster_distib, no._CECs = value)
# merge the two data frames
metadata <- merge(metadata, cluster_distib, by.x = "label", by.y = "name", all.x = TRUE)
#subset the metadata ft
CEC_metadata <- select(metadata,"species", "species_group", "fsp", "race", "isolate_code","genome_size","no._mimps","no._cand_effs", "no._CECs")
# print it nicely
knitr::kable(CEC_metadata)
# # summarise it for chapter text
# summary(CEC_metadata)
# ---- candidate effector clusters in Fo ---- #
# extract just the Fo rows from the CEC_metadata
Fo_CEC_medtadata <- subset(CEC_metadata, !grepl("Other", species_group))
#summarise
summary(Fo_CEC_medtadata)
# ---- candidate effector clusters in fsp ---- #
# extract just the cubense rows from the CEC_metadata
Foc_CEC_medtadata <- subset(CEC_metadata, grepl("cubense", fsp))
summary(Foc_CEC_medtadata)
# extract just the lactucae rows from the CEC_metadata
Fola_CEC_medtadata <- subset(CEC_metadata, grepl("lactucae", fsp))
summary(Fola_CEC_medtadata)
# extract just the apii rows from the CEC_metadata
Foa_CEC_medtadata <- subset(CEC_metadata, grepl("apii", fsp))
summary(Foa_CEC_medtadata)
# extract just the coriandrii rows from the CEC_metadata
Foci_CEC_medtadata <- subset(CEC_metadata, grepl("coriandrii", fsp))
summary(Foci_CEC_medtadata)
# ---- candidate effector clusters in F. sacchari and SY-2 ---- #
# extract just the cubense rows from the CEC_metadata
Fs_CEC_medtadata <- subset(CEC_metadata, grepl("FS66|NRRL_66326|SY-2", isolate_code))
summary(Fs_CEC_medtadata)
# ---- summarise the distribution of candidate effector clusters in all assemblies  ---- #
# count the number of rows where the column total is >= the number of rows (a shared candidate effector cluster!)
shared_cluster <- heatmap_df %>%
select_if(colSums(heatmap_df) >= nrow(heatmap_df))
# count the number of columns
ncol(shared_cluster)
# ---- summarise the distribution of candidate effector clusters in Fo ---- #
# subset only the Fo rows
heatmap_Fo_only <- subset(heatmap_df, grepl("^Fo", rownames(heatmap_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Fo_shared <- heatmap_Fo_only %>%
select_if(colSums(heatmap_Fo_only) >= nrow(heatmap_Fo_only))
# count the number of columns
ncol(heatmap_Fo_shared)
# ---- summarise the distribution of candidate effector clusters in cubense ---- #
# subset only the Foc rows
heatmap_Foc_only <- subset(heatmap_df, grepl("^Fo._fsp._cubense", rownames(heatmap_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foc_shared <- heatmap_Foc_only %>%
select_if(colSums(heatmap_Foc_only) >= nrow(heatmap_Foc_only))
# count the number of columns
ncol(heatmap_Foc_shared)
# ---- summarise the distribution of candidate effector clusters in lactucae ---- #
# subset only the Fola rows
heatmap_Fola_only <- subset(heatmap_df, grepl("^Fo._fsp._lactucae", rownames(heatmap_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Fola_shared <- heatmap_Fola_only %>%
select_if(colSums(heatmap_Fola_only) >= nrow(heatmap_Fola_only))
# count the number of columns
ncol(heatmap_Fola_shared)
# ---- summarise the distribution of candidate effector clusters in apii ---- #
# subset only the Foa rows
heatmap_Foa_only <- subset(heatmap_df, grepl("^Fo._fsp._apii", rownames(heatmap_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foa_shared <- heatmap_Foa_only %>%
select_if(colSums(heatmap_Foa_only) >= nrow(heatmap_Foa_only))
# count the number of columns
ncol(heatmap_Foa_shared)
# ---- summarise the distribution of candidate effector clusters in coriandrii ---- #
# subset only the Foci rows
heatmap_Foci_only <- subset(heatmap_df, grepl("^Fo._fsp._coriandrii", rownames(heatmap_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foci_shared <- heatmap_Foci_only %>%
select_if(colSums(heatmap_Foci_only) >= nrow(heatmap_Foci_only))
# count the number of columns
ncol(heatmap_Foci_shared)
# ---- summarise the distribution of candidate effector clusters in apii and coridanrii (as they share some hosts) ---- #
# subset only the Foa and Foci rows
heatmap_Foa_c_only <- subset(heatmap_df, grepl("^Fo._fsp._apii|^Fo._fsp._coriandrii", rownames(heatmap_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Foa_c_shared <- heatmap_Foa_c_only %>%
select_if(colSums(heatmap_Foa_c_only) >= nrow(heatmap_Foa_c_only))
# count the number of columns
ncol(heatmap_Foa_c_shared)
# ---- summarise the distribution of candidate effector clusters in F. sacchari and SY-2) ---- #
# subset only the Foa and Foci rows
heatmap_Fs_only <- subset(heatmap_df, grepl("^F._sacchari_|^F._TNAU", rownames(heatmap_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_Fs_shared <- heatmap_Fs_only %>%
select_if(colSums(heatmap_Fs_only) >= nrow(heatmap_Fs_only))
# count the number of columns
ncol(heatmap_Fs_shared)
# ---- summarise the distribution of candidate effector clusters in F. sacchari and SY-2) ---- #
# subset only the Foa and Foci rows
heatmap_banana_only <- subset(heatmap_df, grepl("^Fo._fsp._cubense|^F._sacchari_|^F._TNAU", rownames(heatmap_df)))
# count the number of rows where the column total is >= the number of Fo rows (a shared candidate effector cluster!)
heatmap_banana_shared <- heatmap_banana_only %>%
select_if(colSums(heatmap_banana_only) >= nrow(heatmap_banana_only))
# count the number of columns
ncol(heatmap_banana_shared)
# ---- subset the fsp of interest ---- #
# cubense
foc_CEC_stats_sum <- Foc_CEC_medtadata %>%
group_by(race) %>%
summarize(count = n_distinct(isolate_code),
mean_CEC = mean(no._CECs),
min_CEC = min(no._CECs),
max_CEC = max(no._CECs))
# lactucae
fola_CEC_stats_sum <- Fola_CEC_medtadata %>%
group_by(race) %>%
summarize(count = n_distinct(isolate_code),
mean_CEC = mean(no._CECs),
min_CEC = min(no._CECs),
max_CEC= max(no._CECs))
# apii
foa_CEC_stats_sum <- Foa_CEC_medtadata  %>%
group_by(race) %>%
summarize(count = n_distinct(isolate_code),
mean_CEC = mean(no._CECs),
min_CEC = min(no._CECs),
max_CEC = max(no._CECs))
# print it nicely
knitr::kable(foc_CEC_stats_sum)
knitr::kable(fola_CEC_stats_sum)
knitr::kable(foa_CEC_stats_sum)
# ---- subset foc metadata ---- #
#identify all rows in the metadata which do not contain cubense
foc_set_df <- subset(metadata, !grepl("Fo._fsp._cubense|Fo._Fo47", label))
#subset just tip labels
foc_set <- data.frame("label" = foc_set_df[,c("label")])
# convert it to a list
foc_set_2 <- paste(foc_set$label, sep = ",")
# ---- subset foc heatmap data ---- #
# reduce the white space in the heatmap but filtering columns where there is no data for foc
# first we extract only the foc rows using the same approach as for the metadata, but instead we perform on the binary matrix
foc_heat_df <- subset(binary_matrix, grepl("Fo._fsp._cubense|Fo._Fo47", rownames(binary_matrix)))
# now we need to drop the empty columns
foc_heat_df <- foc_heat_df[, colSums(foc_heat_df != 0) > 0]
# ---- Cluster the heatmap data (again)---- #
# normalisiation is mandatory for clustering, but as my data is binary - i did not normalise.
# Compute hierarchical clustering of columns
foc_heat_df <- cluster_matrix(foc_heat_df, dim = 'col', method ="ward.D2")
# ---- build the basic foc tree ---- #
#dop the non foc tip from the tree
tree_reduced <- drop.tip(tree, foc_set_2)
#build a tree from this data and add in out metadata
foc_tree <- ggtree(tree_reduced, ladderize = T ) %<+% metadata
# ---- build full foc specific tree ---- #
# now make the tree pretty
foc_tree_2 <- foc_tree +
#geom_tiplab(aes(label = full_name), offset = 0.00001) +
geom_tiplab(aes(label = isolate_code), color = "grey20", offset = 0.0003, linetype = "blank", geom = "text", align = TRUE) +
geom_tiplab(aes(label = race), offset = 0.0038, linetype = "blank", geom = "text", align = TRUE)+
geom_tippoint(aes(shape = source), size = 3) +
geom_rootedge() +
theme(legend.position = "bottom")
#add extra scale so we can plot fsp with colour
foc_tree_3 <- foc_tree_2 + new_scale_fill()
# add race data
foc_tree_4 <- gheatmap(foc_tree_3, foc_heat_df, offset=0.008, colnames=T, colnames_angle=90, hjust=1, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "grey20",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
geom_treescale(x=0, y=0.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(foc_tree_4)
# save the tree
ggsave("HeatmapAndPhylo_CubenseOnly.png", width = 20, height = 10)
# ---- subset metadata ---- #
#identify all rows in the metadata which do not contain apii and coriandrii
foa_c_set_df <- subset(metadata, !grepl("Fo._fsp._coriandrii|Fo._fsp._apii|Fo._Fo47", label))
#subset just tip labels
foa_c_set <- data.frame("label" = foa_c_set_df[,c("label")])
# convert it to a list
foa_c_set_2 <- paste(foa_c_set$label, sep = ",")
# ---- subset heatmap data ---- #
# reduce the white space in the heatmap but filtering columns where there is no data for foc
# first we extract only the foc rows using the same approach as for the metadata, but instead we perform on the binary matrix
foa_c_heat_df <- subset(binary_matrix, grepl("Fo._fsp._coriandrii|Fo._fsp._apii|Fo._Fo47", rownames(binary_matrix)))
# now we need to drop the empty columns
foa_c_heat_df <- foa_c_heat_df[, colSums(foa_c_heat_df != 0) > 0]
# ---- Cluster the heatmap data (again)---- #
# normalisiation is mandatory for clustering, but as my data is binary - i did not normalise.
# Compute hierarchical clustering of columns
foa_c_heat_df <- cluster_matrix(foa_c_heat_df, dim = 'col', method ="ward.D2")
# ---- build the basic foc tree ---- #
#dop the non foc tip from the tree
tree_reduced <- drop.tip(tree, foa_c_set_2)
#build a tree from this data and add in out metadata
foa_c_tree <- ggtree(tree_reduced, ladderize = T ) %<+% metadata
# ---- build full foc specific tree ---- #
# now make the tree pretty
foa_c_tree_2 <- foa_c_tree +
#geom_tiplab(aes(label = full_name), offset = 0.00001) +
geom_tiplab(aes(label = fsp), color = "grey20", offset = 0.0003, linetype = "blank", geom = "text", align = TRUE) +
geom_tiplab(aes(label = isolate_code), color = "grey20", offset = 0.002, linetype = "blank", geom = "text", align = TRUE) +
geom_tiplab(aes(label = race), offset = 0.0042, linetype = "blank", geom = "text", align = TRUE)+
geom_tippoint(aes(shape = source), size = 3) +
geom_rootedge() +
theme(legend.position = "bottom")
#add extra scale so we can plot fsp with colour
foa_c_tree_3 <- foa_c_tree_2 + new_scale_fill()
# add race data
foa_c_tree_4 <- gheatmap(foa_c_tree_3, foa_c_heat_df, offset=0.0065, colnames=T, colnames_angle=90, hjust=1, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "grey20",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
geom_treescale(x=0, y=.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(foa_c_tree_4)
# save the tree
ggsave("HeatmapAndPhylo_ApiiAndCoriandriiOnly.png", width = 20, height = 10)
# ---- subset fola metadata ---- #
#identify all rows in the metadata which do not contain lactucae
fola_set_df <- subset(metadata, !grepl("Fo._fsp._lactucae|Fo._fsp._matthiolae|Fo._Fo47", label))
#subset just tip labels
fola_set <- data.frame("label" = fola_set_df[,c("label")])
# convert it to a list
fola_set_2 <- paste(fola_set$label, sep = ",")
# ---- subset fola heatmap data ---- #
# reduce the white space in the heatmap but filtering columns where there is no data for foc
# first we extract only the foc rows using the same approach as for the metadata, but instead we perform on the binary matrix
fola_heat_df <- subset(binary_matrix, grepl("Fo._fsp._lactucae|Fo._fsp._matthiolae|Fo._Fo47", rownames(binary_matrix)))
# now we need to drop the empty columns
fola_heat_df <- fola_heat_df[, colSums(fola_heat_df != 0) > 0]
# ---- Cluster the heatmap data (again)---- #
# normalisiation is mandatory for clustering, but as my data is binary - i did not normalise.
# Compute hierarchical clustering of columns
fola_heat_df <- cluster_matrix(fola_heat_df, method ="ward.D2")
# ---- build the basic foc tree ---- #
#dop the non foc tip from the tree
tree_reduced <- drop.tip(tree, fola_set_2)
#build a tree from this data and add in out metadata
fola_tree <- ggtree(tree_reduced, ladderize = T ) %<+% metadata
# ---- build full foc specific tree ---- #
# now make the tree pretty
fola_tree_2 <- fola_tree +
geom_tiplab(aes(label = fsp), offset = 0.0003) +
geom_tiplab(aes(label = isolate_code), color = "grey20", offset = 0.002, linetype = "blank", geom = "text", align = TRUE) +
geom_tiplab(aes(label = race), offset = 0.0042, linetype = "blank", geom = "text", align = TRUE)+
geom_tippoint(aes(shape = source), size = 3) +
geom_rootedge() +
theme(legend.position = "bottom")
#add extra scale so we can plot fsp with colour
fola_tree_3 <- fola_tree_2 + new_scale_fill()
# add race data
fola_tree_4 <- gheatmap(fola_tree_3, fola_heat_df, offset=0.0065, colnames=T, colnames_angle=90, hjust=1, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "grey20",
breaks = c("Absent","Present"),
na.value = "grey") +
guides(fill = guide_colourbar(barwidth = 5, barheight = 1)) +
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())  +
geom_treescale(x=0, y=.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(fola_tree_4)
# save the tree
ggsave("HeatmapAndPhylo_LactucaeOnly.png", width = 20, height = 10)
# ---- load session data --- #
session_data <- sessionInfo()
session_data
#plot it
plot(mimpsandcandeffs)
# ---- Prepare Data for plotting --- #
#Extract the isolate, assembly size, total number of mimps and effectors coloumns.
race_plot_data <- select(metadata,"species", "species_group", "fsp", "race" ,"isolate_code","genome_size","no._mimps","no._cand_effs") %>%
#Rename the columns to reduce the long titles
rename(isolate=isolate_code,
mimps=no._mimps,
candidate_effectors=no._cand_effs,
assembly_size =genome_size) %>%
#We need to drop rows which were not included in the Maei analysis
drop_na(candidate_effectors) %>%
#Merge/group the mimps and effector columns so that both can be plotted per strain/isolate.
pivot_longer(cols = c(mimps,candidate_effectors), names_to="Legend", values_to="mimps_and_candidate_effectors") %>%
mutate(Legend = factor(Legend, levels=c('mimps','candidate_effectors')))
# ---- subset metadata ---- #
# extract only the fsp we are interested in and drop isolates which don't have a race classification
race_plot_data_subset <- subset(race_plot_data, grepl("lactucae|apii|cubense", fsp)) %>%
drop_na(race)
# ---- funky cheats to lable the facet plot nicely --- #
#set new labels
new_labels_y <- c("mimps" = "mimps", "candidate_effectors" = "candidate effectors")
new_labels_x <- c("apii" = "Fo. fsp. apii", "cubense" = "Fo. fsp. cubense", "lactucae" = "Fo. fsp. lactucae")
# ---- build plots ---- #
theme_set(theme_pubr()) #set the ggpubr theme
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Total number of mimps \nand candidate effectors") +
scale_fill_manual(values = c("candidate_effectors" = "grey30", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme_bw() +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_blank(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
#plot it
plot(mimpsandcandeffs)
#save the plot
ggsave("MimpsAndCandEffs_FspOfInterest.png", width = 10, height = 10)
# ---- Prepare Data for plotting --- #
#Extract the isolate, assembly size, total number of mimps and effectors coloumns.
race_plot_data <- select(metadata,"species", "species_group", "fsp", "race" ,"isolate_code","genome_size","no._mimps","no._cand_effs") %>%
#Rename the columns to reduce the long titles
rename(isolate=isolate_code,
mimps=no._mimps,
candidate_effectors=no._cand_effs,
assembly_size =genome_size) %>%
#We need to drop rows which were not included in the Maei analysis
drop_na(candidate_effectors) %>%
#Merge/group the mimps and effector columns so that both can be plotted per strain/isolate.
pivot_longer(cols = c(mimps,candidate_effectors), names_to="Legend", values_to="mimps_and_candidate_effectors") %>%
mutate(Legend = factor(Legend, levels=c('mimps','candidate_effectors')))
# ---- subset metadata ---- #
# extract only the fsp we are interested in and drop isolates which don't have a race classification
race_plot_data_subset <- subset(race_plot_data, grepl("lactucae|apii|cubense", fsp)) %>%
drop_na(race)
# ---- funky cheats to lable the facet plot nicely --- #
#set new labels
new_labels_y <- c("mimps" = "mimps", "candidate_effectors" = "candidate effectors")
new_labels_x <- c("apii" = "Fo. fsp. apii", "cubense" = "Fo. fsp. cubense", "lactucae" = "Fo. fsp. lactucae")
# ---- build plots ---- #
theme_set(theme_pubr()) #set the ggpubr theme
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Total number of mimps \nand candidate effectors") +
scale_fill_manual(values = c("candidate_effectors" = "grey35", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme_bw() +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_blank(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
#plot it
plot(mimpsandcandeffs)
#save the plot
ggsave("MimpsAndCandEffs_FspOfInterest.png", width = 10, height = 10)
# ---- Prepare Data for plotting --- #
#Extract the isolate, assembly size, total number of mimps and effectors coloumns.
race_plot_data <- select(metadata,"species", "species_group", "fsp", "race" ,"isolate_code","genome_size","no._mimps","no._cand_effs") %>%
#Rename the columns to reduce the long titles
rename(isolate=isolate_code,
mimps=no._mimps,
candidate_effectors=no._cand_effs,
assembly_size =genome_size) %>%
#We need to drop rows which were not included in the Maei analysis
drop_na(candidate_effectors) %>%
#Merge/group the mimps and effector columns so that both can be plotted per strain/isolate.
pivot_longer(cols = c(mimps,candidate_effectors), names_to="Legend", values_to="mimps_and_candidate_effectors") %>%
mutate(Legend = factor(Legend, levels=c('mimps','candidate_effectors')))
# ---- subset metadata ---- #
# extract only the fsp we are interested in and drop isolates which don't have a race classification
race_plot_data_subset <- subset(race_plot_data, grepl("lactucae|apii|cubense", fsp)) %>%
drop_na(race)
# ---- funky cheats to lable the facet plot nicely --- #
#set new labels
new_labels_y <- c("mimps" = "mimps", "candidate_effectors" = "candidate effectors")
new_labels_x <- c("apii" = "Fo. fsp. apii", "cubense" = "Fo. fsp. cubense", "lactucae" = "Fo. fsp. lactucae")
# ---- build plots ---- #
theme_set(theme_pubr()) #set the ggpubr theme
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Total number of mimps \nand candidate effectors") +
scale_fill_manual(values = c("candidate_effectors" = "grey50", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme_bw() +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_blank(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
#plot it
plot(mimpsandcandeffs)
#save the plot
ggsave("MimpsAndCandEffs_FspOfInterest.png", width = 10, height = 10)
# ---- Prepare Data for plotting --- #
#Extract the isolate, assembly size, total number of mimps and effectors coloumns.
race_plot_data <- select(metadata,"species", "species_group", "fsp", "race" ,"isolate_code","genome_size","no._mimps","no._cand_effs") %>%
#Rename the columns to reduce the long titles
rename(isolate=isolate_code,
mimps=no._mimps,
candidate_effectors=no._cand_effs,
assembly_size =genome_size) %>%
#We need to drop rows which were not included in the Maei analysis
drop_na(candidate_effectors) %>%
#Merge/group the mimps and effector columns so that both can be plotted per strain/isolate.
pivot_longer(cols = c(mimps,candidate_effectors), names_to="Legend", values_to="mimps_and_candidate_effectors") %>%
mutate(Legend = factor(Legend, levels=c('mimps','candidate_effectors')))
# ---- subset metadata ---- #
# extract only the fsp we are interested in and drop isolates which don't have a race classification
race_plot_data_subset <- subset(race_plot_data, grepl("lactucae|apii|cubense", fsp)) %>%
drop_na(race)
# ---- funky cheats to lable the facet plot nicely --- #
#set new labels
new_labels_y <- c("mimps" = "mimps", "candidate_effectors" = "candidate effectors")
new_labels_x <- c("apii" = "Fo. fsp. apii", "cubense" = "Fo. fsp. cubense", "lactucae" = "Fo. fsp. lactucae")
# ---- build plots ---- #
theme_set(theme_pubr()) #set the ggpubr theme
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Total number of mimps \nand candidate effectors") +
scale_fill_manual(values = c("candidate_effectors" = "grey40", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme_bw() +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_blank(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
#plot it
plot(mimpsandcandeffs)
#save the plot
ggsave("MimpsAndCandEffs_FspOfInterest.png", width = 10, height = 10)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Total number of mimps \nand candidate effectors") +
scale_fill_manual(values = c("candidate_effectors" = "#272727", "mimps" = "#dcddde"), label=c("mimps", "candidate effectors")) +
theme_bw() +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_blank(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
#plot it
plot(mimpsandcandeffs)
