scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme_bw()
mimpsandcandeffs
# ---- Prepare Data for plotting --- #
#Extract the isolate, assembly size, total number of mimps and effectors coloumns.
race_plot_data <- select(metadata,"species", "species_group", "fsp", "race" ,"isolate_code","genome_size","no._mimps","no._cand_effs") %>%
#Rename the columns to reduce the long titles
rename(isolate=isolate_code,
mimps=no._mimps,
candidate_effectors=no._cand_effs,
assembly_size =genome_size) %>%
#We need to drop rows which were not included in the Maei analysis
drop_na(candidate_effectors) %>%
#Merge/group the mimps and effector columns so that both can be plotted per strain/isolate.
pivot_longer(cols = c(mimps,candidate_effectors), names_to="Legend", values_to="mimps_and_candidate_effectors") %>%
mutate(Legend = factor(Legend, levels=c('mimps','candidate_effectors')))
# ---- subset metadata ---- #
# extract only the fsp we are interested in
race_plot_data_subset <- subset(race_plot_data, grepl("lactucae|apii|cubense", fsp)) %>%
drop_na(race)
# ---- funky cheats to lable the facet plot nicely --- #
#set new labels
new_labels_y <- c("mimps" = "mimps", "candidate_effectors" = "candidate effectors")
new_labels_x <- c("apii" = "Fo. fsp. apii", "cubense" = "Fo. fsp. cubense", "lactucae" = "Fo. fsp. lactucae")
# ---- build plots ---- #
theme_set(theme_pubr()) #set the ggpubr theme
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme_bw()
#save the plot
ggsave("MimpsAndCandEffs_CubenseOnly.png", width = 20, height = 10)
#plot it
plot(mimpsandcandeffs)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.background.y = element_blank()) +
theme_bw()
#plot it
plot(mimpsandcandeffs)
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.background.y = element_blank()) +
theme_bw()
mimpsandcandeffs
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.background.y = element_blank())
#plot it
plot(mimpsandcandeffs)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank()) +
theme_bw()
#plot it
plot(mimpsandcandeffs)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank()) +
theme_bw()
#plot it
plot(mimpsandcandeffs)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank())
#plot it
plot(mimpsandcandeffs)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line()) # put the lines back in
#plot it
plot(mimpsandcandeffs)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid = element_line()) # put the lines back in
#plot it
plot(mimpsandcandeffs)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line()) # put the lines back in
#plot it
plot(mimpsandcandeffs)
#plot it
plot(mimpsandcandeffs)
#save the plot
ggsave("MimpsAndCandEffs_CubenseOnly.png", width = 20, height = 10)
#plot it
plot(mimpsandcandeffs)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line(), # put the lines back in
legend.position = "bottom")
#plot it
plot(mimpsandcandeffs)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_grid(Legend ~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
#plot it
plot(mimpsandcandeffs)
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
race_plot_data_subset
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(var(fsp), labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
race_plot_data_subset
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(var(fsp), labeller = labeller(fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
mimpsandcandeffs
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_violin(aes(fill = Legend)) +
facet_wrap(~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
#plot it
plot(mimpsandcandeffs)
boxplot
# build plots for candidate effectors and mimps
mimpsandcandeffs <- ggplot(race_plot_data_subset, aes(x=race, y=mimps_and_candidate_effectors)) + # plot race and mimp/candidate effector count
geom_boxplot(aes(fill = Legend)) +
facet_wrap(~ fsp, labeller = labeller(Legend = new_labels_y, fsp = new_labels_x), scales = "free_x") +  # split the plot by fsp and then mimps/candidate effectors
labs(x = "Race",
y = "Count") +
scale_fill_manual(values = c("candidate_effectors" = "darkolivegreen", "mimps" = "#DDE0DA"), label=c("mimps", "candidate effectors")) +
theme(strip.text.y = element_blank(),  # remove the side names as we have this shown in colour now.
panel.grid.major = element_line(), # put the lines back in
legend.position = "bottom",
legend.title = element_blank())
#plot it
plot(mimpsandcandeffs)
# add effector heatmap
p6 <-gheatmap(p5, heatmap_dat, offset=0.07, colnames=FALSE, legend_title="Presence/\nAbsence", color = "grey",  width = 1.5)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "darkolivegreen",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 2)))
# ---- Cluster the heatmap data ---- #
# normalisiation is mandatory for clustering, but as my data is binary - i did not normalise.
# Compute hierarchical clustering of columns
heatmap_dat <- cluster_matrix(binary_matrix, dim = 'col', method ="ward.D2")
# ---- Build the full figure ---- #
p2 <- p +
geom_treescale(x = 0, y = 1, width = 0.004) +
geom_tiplab(aes(label = full_name), offset = 0.001) +
geom_tiplab(aes(label = isolate_code), color = "black", offset = 0.028, linetype = "blank", geom = "text", align = TRUE) +
geom_tiplab(aes(label = race), color = "black", offset = 0.047, linetype = "blank", geom = "text", align = TRUE)+
geom_tippoint(aes(shape = source), size = 3) +
geom_rootedge() +
theme(legend.position = "bottom")
#add extra scale so we can plot fsp with colour
p3 <- p2 + new_scale_fill()
# add race data
p4 <- gheatmap(p3, fsp_df,
offset = 0.02,
width = 0.03,
color = "black",
colnames = FALSE) +
scale_fill_manual(name = "Fsp",
values = c("blue","purple","goldenrod4","grey90","gold","brown", "lightpink","darkolivegreen3", "black", "tomato", "lavender", "tan", "palegreen4", "coral", "yellow"), na.value = "grey") +
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "vertical", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 2)))
# add extra discrete scale
p5 <- p4 + new_scale_fill()
# add effector heatmap
p6 <-gheatmap(p5, heatmap_dat, offset=0.07, colnames=FALSE, legend_title="Presence/\nAbsence", color = "grey",  width = 1.5)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "darkolivegreen",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 2)))
plot(p6)
# save the output
ggsave("HeatmapAndPhylo.png", width = 30, height = 10)
# add effector heatmap
p6 <-gheatmap(p5, heatmap_dat, offset=0.07, colnames=FALSE, legend_title="Presence/\nAbsence", color = NULL,  width = 1.5)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "darkolivegree",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 2)))
plot(p6)
# add effector heatmap
p6 <-gheatmap(p5, heatmap_dat, offset=0.07, colnames=FALSE, legend_title="Presence/\nAbsence", color = NULL,  width = 1.5)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "darkolivegree",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 2)))
# add effector heatmap
p6 <-gheatmap(p5, heatmap_dat, offset=0.07, colnames=FALSE, legend_title="Presence/\nAbsence", color = NULL,  width = 1.5)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "darkolivegreen",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 2)))
plot(p6)
# ---- subset foc metadata ---- #
#identify all rows in the metadata which do not contain cubense
foc_set_df <- subset(metadata, !grepl("Fo._fsp._cubense|Fo._Fo47", label))
#subset just tip labels
foc_set <- data.frame("label" = foc_set_df[,c("label")])
# convert it to a list
foc_set_2 <- paste(foc_set$label, sep = ",")
# ---- subset foc heatmap data ---- #
# reduce the white space in the heatmap but filtering columns where there is no data for foc
# first we extract only the foc rows using the same approach as for the metadata, but instead we perform on the binary matrix
foc_heat_df <- subset(binary_matrix, grepl("Fo._fsp._cubense|Fo._Fo47", rownames(binary_matrix)))
# now we need to drop the empty columns
foc_heat_df <- foc_heat_df[, colSums(foc_heat_df != 0) > 0]
# ---- Cluster the heatmap data (again)---- #
# normalisiation is mandatory for clustering, but as my data is binary - i did not normalise.
# Compute hierarchical clustering of columns
foc_heat_df <- cluster_matrix(foc_heat_df, dim = 'col', method ="ward.D2")
# ---- build the basic foc tree ---- #
#dop the non foc tip from the tree
tree_reduced <- drop.tip(tree, foc_set_2)
#build a tree from this data and add in out metadata
foc_tree <- ggtree(tree_reduced, ladderize = T ) %<+% metadata
# ---- build full foc specific tree ---- #
# now make the tree pretty
foc_tree_2 <- foc_tree +
#geom_tiplab(aes(label = full_name), offset = 0.00001) +
geom_tiplab(aes(label = isolate_code), color = "black", offset = 0.0003, linetype = "blank", geom = "text", align = TRUE) +
geom_tiplab(aes(label = race), offset = 0.0038, linetype = "blank", geom = "text", align = TRUE)+
geom_tippoint(aes(shape = source), size = 3) +
geom_rootedge() +
theme(legend.position = "bottom")
#add extra scale so we can plot fsp with colour
foc_tree_3 <- foc_tree_2 + new_scale_fill()
# add race data
foc_tree_4 <- gheatmap(foc_tree_3, foc_heat_df, offset=0.008, colnames=T, colnames_angle=90, hjust=1, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "darkolivegreen",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
geom_treescale(x=0, y=0.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(foc_tree_4)
# save the tree
ggsave("HeatmapAndPhylo_CubenseOnly.png", width = 20, height = 10)
# ---- subset foc metadata ---- #
#identify all rows in the metadata which do not contain cubense
foc_set_df <- subset(metadata, !grepl("Fo._fsp._cubense|Fo._Fo47", label))
#subset just tip labels
foc_set <- data.frame("label" = foc_set_df[,c("label")])
# convert it to a list
foc_set_2 <- paste(foc_set$label, sep = ",")
# ---- subset foc heatmap data ---- #
# reduce the white space in the heatmap but filtering columns where there is no data for foc
# first we extract only the foc rows using the same approach as for the metadata, but instead we perform on the binary matrix
foc_heat_df <- subset(binary_matrix, grepl("Fo._fsp._cubense|Fo._Fo47", rownames(binary_matrix)))
# now we need to drop the empty columns
foc_heat_df <- foc_heat_df[, colSums(foc_heat_df != 0) > 0]
# ---- Cluster the heatmap data (again)---- #
# normalisiation is mandatory for clustering, but as my data is binary - i did not normalise.
# Compute hierarchical clustering of columns
foc_heat_df <- cluster_matrix(foc_heat_df, dim = 'col', method ="ward.D2")
# ---- build the basic foc tree ---- #
#dop the non foc tip from the tree
tree_reduced <- drop.tip(tree, foc_set_2)
#build a tree from this data and add in out metadata
foc_tree <- ggtree(tree_reduced, ladderize = T ) %<+% metadata
# ---- build full foc specific tree ---- #
# now make the tree pretty
foc_tree_2 <- foc_tree +
#geom_tiplab(aes(label = full_name), offset = 0.00001) +
geom_tiplab(aes(label = isolate_code), color = "black", offset = 0.0003, linetype = "blank", geom = "text", align = TRUE) +
geom_tiplab(aes(label = race), offset = 0.0038, linetype = "blank", geom = "text", align = TRUE)+
geom_tippoint(aes(shape = source), size = 3) +
geom_rootedge() +
theme(legend.position = "bottom")
#add extra scale so we can plot fsp with colour
foc_tree_3 <- foc_tree_2 + new_scale_fill()
# add race data
foc_tree_4 <- gheatmap(foc_tree_3, foc_heat_df, offset=0.008, colnames=T, colnames_angle=90, hjust=1, font.size=3, legend_title="Presence/\nAbsence", color = NULL,  width = 4)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "darkolivegreen",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
geom_treescale(x=0, y=0.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(foc_tree_4)
# save the tree
ggsave("HeatmapAndPhylo_CubenseOnly.png", width = 20, height = 10)
# ---- subset foc metadata ---- #
#identify all rows in the metadata which do not contain cubense
foc_set_df <- subset(metadata, !grepl("Fo._fsp._cubense|Fo._Fo47", label))
#subset just tip labels
foc_set <- data.frame("label" = foc_set_df[,c("label")])
# convert it to a list
foc_set_2 <- paste(foc_set$label, sep = ",")
# ---- subset foc heatmap data ---- #
# reduce the white space in the heatmap but filtering columns where there is no data for foc
# first we extract only the foc rows using the same approach as for the metadata, but instead we perform on the binary matrix
foc_heat_df <- subset(binary_matrix, grepl("Fo._fsp._cubense|Fo._Fo47", rownames(binary_matrix)))
# now we need to drop the empty columns
foc_heat_df <- foc_heat_df[, colSums(foc_heat_df != 0) > 0]
# ---- Cluster the heatmap data (again)---- #
# normalisiation is mandatory for clustering, but as my data is binary - i did not normalise.
# Compute hierarchical clustering of columns
foc_heat_df <- cluster_matrix(foc_heat_df, dim = 'col', method ="ward.D2")
# ---- build the basic foc tree ---- #
#dop the non foc tip from the tree
tree_reduced <- drop.tip(tree, foc_set_2)
#build a tree from this data and add in out metadata
foc_tree <- ggtree(tree_reduced, ladderize = T ) %<+% metadata
# ---- build full foc specific tree ---- #
# now make the tree pretty
foc_tree_2 <- foc_tree +
#geom_tiplab(aes(label = full_name), offset = 0.00001) +
geom_tiplab(aes(label = isolate_code), color = "black", offset = 0.0003, linetype = "blank", geom = "text", align = TRUE) +
geom_tiplab(aes(label = race), offset = 0.0038, linetype = "blank", geom = "text", align = TRUE)+
geom_tippoint(aes(shape = source), size = 3) +
geom_rootedge() +
theme(legend.position = "bottom")
#add extra scale so we can plot fsp with colour
foc_tree_3 <- foc_tree_2 + new_scale_fill()
# add race data
foc_tree_4 <- gheatmap(foc_tree_3, foc_heat_df, offset=0.008, colnames=T, colnames_angle=90, hjust=1, font.size=3, legend_title="Presence/\nAbsence", color = "grey",  width = 4)  +
scale_fill_continuous(name = "Presence/\nAbsence",
low = "white", high = "darkolivegreen",
breaks = c("Absent","Present"),
na.value = "grey")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.box = "horizontal", legend.margin = margin())+
geom_treescale(x=0, y=0.1, width = 0.004) +
guides(shape = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90,         #Adjust the text orientation on the x axis
vjust = 0.5,
hjust=1,
size = 8,
colour = "white" )) +
coord_cartesian(clip = "off")
# plot the tree
plot(foc_tree_4)
# save the tree
ggsave("HeatmapAndPhylo_CubenseOnly.png", width = 20, height = 10)
